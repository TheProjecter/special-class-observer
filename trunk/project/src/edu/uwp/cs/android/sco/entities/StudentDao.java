package edu.uwp.cs.android.sco.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import edu.uwp.cs.android.sco.entities.Student;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table STUDENT.
*/
public class StudentDao extends AbstractDao<Student, Long> {

    public static final String TABLENAME = "STUDENT";

    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FName = new Property(1, String.class, "fName", false, "F_NAME");
        public final static Property LName = new Property(2, String.class, "lName", false, "L_NAME");
        public final static Property Note = new Property(3, String.class, "note", false, "NOTE");
        public final static Property LastModified = new Property(4, java.util.Date.class, "lastModified", false, "LAST_MODIFIED");
    };

    private DaoSession daoSession;


    public StudentDao(DaoConfig config) {
        super(config);
    }
    
    public StudentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'STUDENT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'F_NAME' TEXT NOT NULL ," + // 1: fName
                "'L_NAME' TEXT NOT NULL ," + // 2: lName
                "'NOTE' TEXT," + // 3: note
                "'LAST_MODIFIED' INTEGER NOT NULL );"; // 4: lastModified
        db.execSQL(sql);
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'STUDENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Student entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getFName());
        stmt.bindString(3, entity.getLName());
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(4, note);
        }
        stmt.bindLong(5, entity.getLastModified().getTime());
    }

    @Override
    protected void attachEntity(Student entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Student readEntity(Cursor cursor, int offset) {
        Student entity = new Student( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // fName
            cursor.getString(offset + 2), // lName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // note
            new java.util.Date(cursor.getLong(offset + 4)) // lastModified
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Student entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFName(cursor.getString(offset + 1));
        entity.setLName(cursor.getString(offset + 2));
        entity.setNote(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLastModified(new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    @Override
    protected Long updateKeyAfterInsert(Student entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Student entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
