package edu.uwp.cs.android.sco.entities;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import edu.uwp.cs.android.sco.entities.RelationCourseStudent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RELATION_COURSE_STUDENT.
*/
public class RelationCourseStudentDao extends AbstractDao<RelationCourseStudent, Void> {

    public static final String TABLENAME = "RELATION_COURSE_STUDENT";

    public static class Properties {
        public final static Property StudentId = new Property(0, long.class, "studentId", false, "STUDENT_ID");
        public final static Property CourseId = new Property(1, long.class, "courseId", false, "COURSE_ID");
    };

    private Query<RelationCourseStudent> course_StudentsQuery;
    private Query<RelationCourseStudent> student_CoursesQuery;

    public RelationCourseStudentDao(DaoConfig config) {
        super(config);
    }
    
    public RelationCourseStudentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'RELATION_COURSE_STUDENT' (" + //
                "'STUDENT_ID' INTEGER NOT NULL ," + // 0: studentId
                "'COURSE_ID' INTEGER NOT NULL );"; // 1: courseId
        db.execSQL(sql);
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RELATION_COURSE_STUDENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RelationCourseStudent entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStudentId());
        stmt.bindLong(2, entity.getCourseId());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public RelationCourseStudent readEntity(Cursor cursor, int offset) {
        RelationCourseStudent entity = new RelationCourseStudent( //
            cursor.getLong(offset + 0), // studentId
            cursor.getLong(offset + 1) // courseId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RelationCourseStudent entity, int offset) {
        entity.setStudentId(cursor.getLong(offset + 0));
        entity.setCourseId(cursor.getLong(offset + 1));
     }
    
    @Override
    protected Void updateKeyAfterInsert(RelationCourseStudent entity, long rowId) {
        // TODO XXX Only Long PKs are supported currently
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(RelationCourseStudent entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "students" to-many relationship of Course. */
    public synchronized List<RelationCourseStudent> _queryCourse_Students(long studentId) {
        if (course_StudentsQuery == null) {
            QueryBuilder<RelationCourseStudent> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.StudentId.eq(studentId));
            course_StudentsQuery = queryBuilder.build();
        } else {
            course_StudentsQuery.setParameter(0, studentId);
        }
        return course_StudentsQuery.list();
    }

    /** Internal query to resolve the "courses" to-many relationship of Student. */
    public synchronized List<RelationCourseStudent> _queryStudent_Courses(long courseId) {
        if (student_CoursesQuery == null) {
            QueryBuilder<RelationCourseStudent> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.CourseId.eq(courseId));
            student_CoursesQuery = queryBuilder.build();
        } else {
            student_CoursesQuery.setParameter(0, courseId);
        }
        return student_CoursesQuery.list();
    }

}
