package edu.uwp.cs.android.sco.entities;

import java.util.List;
import edu.uwp.cs.android.sco.entities.DaoSession;
import edu.uwp.cs.android.sco.entities.Disability;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table STUDENT.
 */
public class Student {

    private Long id;
    /** Not-null value. */
    private String fName;
    /** Not-null value. */
    private String lName;

    /** Used to resolve relations */
    private DaoSession daoSession;

    /** Used for active entity operations. */
    private StudentDao myDao;

    private List<Disability> disabilities;
    private List<RelationCourseStudent> courses;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Student() {
    }

    public Student(Long id) {
        this.id = id;
    }

    public Student(Long id, String fName, String lName) {
        this.id = id;
        this.fName = fName;
        this.lName = lName;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getStudentDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getFName() {
        return fName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFName(String fName) {
        this.fName = fName;
    }

    /** Not-null value. */
    public String getLName() {
        return lName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setLName(String lName) {
        this.lName = lName;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<Disability> getDisabilities() {
        if (disabilities == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DisabilityDao targetDao = daoSession.getDisabilityDao();
            disabilities = targetDao._queryStudent_Disabilities(id);
        }
        return disabilities;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDisabilities() {
        disabilities = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<RelationCourseStudent> getCourses() {
        if (courses == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RelationCourseStudentDao targetDao = daoSession.getRelationCourseStudentDao();
            courses = targetDao._queryStudent_Courses(id);
        }
        return courses;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCourses() {
        courses = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    
    @Override
    public String toString() {
        return "ID: " + id + ", NAME: " + fName + " " + lName + "\n DISABILITIES: " + disabilities;
    }
    
    public void addCourse(Course course) {
    	RelationCourseStudent rel = new RelationCourseStudent(id, course.getId());
    	courses = getCourses();
    	daoSession.insert(rel);
    	courses.add(rel);
    }
    
    public void addDisability(Disability disability) {
        disabilities.add(disability);
    }
    
    public void addDisability(String name, String info, String category,  long studentId) {
        Disability dis = new Disability(null, name, info, 0, category, id);
        disabilities = getDisabilities();
        daoSession.insert(dis);
        disabilities.add(dis);
    }
    
    public void addDefaultDisabilities() {
        addDisability("Disability1", "Info1", "General", id);
        addDisability("Disability2", "Info2", "General", id);
        addDisability("Disability3", "Info3", "General", id);
    }
    
    public void deleteRelation(long studentId) {
        disabilities = getDisabilities();
        for (int i = 0; i < disabilities.size(); i++) {
                        Disability dis = disabilities.get(i); 
                        
                        if (dis.getStudentId() == studentId) {
                                daoSession.delete(dis);
                                disabilities.remove(dis);
                                i--;
                        }
                }
    }
    
    // KEEP METHODS END

}
